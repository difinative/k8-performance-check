apiVersion: v1
kind: ConfigMap
metadata:
  name: iperf-cm
data:
  iperf-script.sh: |
    #!/bin/bash

    # format_size
    # Purpose: Formats raw disk and memory sizes from kibibytes (KiB) to largest unit
    # Parameters:
    #          1. RAW - the raw memory size (RAM/Swap) in kibibytes
    # Returns:
    #          Formatted memory size in KiB, MiB, GiB, or TiB
    function format_size {
      RAW=$1 # mem size in KiB
      RESULT=$RAW
      local DENOM=1
      local UNIT="KiB"

      # ensure the raw value is a number, otherwise return blank
      re='^[0-9]+$'
      if ! [[ $RAW =~ $re ]] ; then
        echo "" 
        return 0
      fi

      if [ "$RAW" -ge 1073741824 ]; then
        DENOM=1073741824
        UNIT="TiB"
      elif [ "$RAW" -ge 1048576 ]; then
        DENOM=1048576
        UNIT="GiB"
      elif [ "$RAW" -ge 1024 ]; then
        DENOM=1024
        UNIT="MiB"
      fi

      # divide the raw result to get the corresponding formatted result (based on determined unit)
      RESULT=$(awk -v a="$RESULT" -v b="$DENOM" 'BEGIN { print a / b }')
      # shorten the formatted result to two decimal places (i.e. x.x)
      RESULT=$(echo $RESULT | awk -F. '{ printf "%0.1f",$1"."substr($2,1,2) }')
      # concat formatted result value with units and return result
      RESULT="$RESULT $UNIT"
      echo $RESULT
    }
    FIO_CMD=fio
    DATE=$(date -Iseconds | sed -e "s/:/_/g")
    TEST_PATH=./$DATE
    DISK_PATH=$TEST_PATH/disk
    mkdir -p $DISK_PATH
    echo -e '# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #'
    echo -e '#              IPERF NETWORK TEST                     #'
    echo -e '#                                                    #'
    echo -e '#                                                    #'
    echo -e '# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #'

    echo -e
    date
    TIME_START=$(date '+%Y%m%d-%H%M%S')

    IPV4_CHECK=$((ping -4 -c 1 -W 4 ipv4.google.com >/dev/null 2>&1 && echo true) || $IP_CHECK_CMD -4 icanhazip.com 2> /dev/null)
    IPV6_CHECK=$((ping -6 -c 1 -W 4 ipv6.google.com >/dev/null 2>&1 && echo true) || $IP_CHECK_CMD -6 icanhazip.com 2> /dev/null)
    echo -e 
    echo -e "Basic System Information:"
    echo -e "---------------------------------"
    UPTIME=$(uptime | awk -F'( |,|:)+' '{d=h=m=0; if ($7=="min") m=$6; else {if ($7~/^day/) {d=$6;h=$8;m=$9} else {h=$6;m=$7}}} {print d+0,"days,",h+0,"hours,",m+0,"minutes"}')
    echo -e "Uptime     : $UPTIME"
    if [[ $ARCH = *aarch64* || $ARCH = *arm* ]]; then
      CPU_PROC=$(lscpu | grep "Model name" | sed 's/Model name: *//g')
    else
      CPU_PROC=$(awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//')
    fi
    echo -e "Processor  : $CPU_PROC"
    if [[ $ARCH = *aarch64* || $ARCH = *arm* ]]; then
      CPU_CORES=$(lscpu | grep "^[[:blank:]]*CPU(s):" | sed 's/CPU(s): *//g')
      CPU_FREQ=$(lscpu | grep "CPU max MHz" | sed 's/CPU max MHz: *//g')
      [[ -z "$CPU_FREQ" ]] && CPU_FREQ="???"
      CPU_FREQ="${CPU_FREQ} MHz"
    else
      CPU_CORES=$(awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo)
      CPU_FREQ=$(awk -F: ' /cpu MHz/ {freq=$2} END {print freq " MHz"}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//')
    fi
    echo -e "CPU cores  : $CPU_CORES @ $CPU_FREQ"
    CPU_AES=$(cat /proc/cpuinfo | grep aes)
    [[ -z "$CPU_AES" ]] && CPU_AES="\xE2\x9D\x8C Disabled" || CPU_AES="\xE2\x9C\x94 Enabled"
    echo -e "AES-NI     : $CPU_AES"
    CPU_VIRT=$(cat /proc/cpuinfo | grep 'vmx\|svm')
    [[ -z "$CPU_VIRT" ]] && CPU_VIRT="\xE2\x9D\x8C Disabled" || CPU_VIRT="\xE2\x9C\x94 Enabled"
    echo -e "VM-x/AMD-V : $CPU_VIRT"
    TOTAL_RAM_RAW=$(free | awk 'NR==2 {print $2}')
    TOTAL_RAM=$(format_size $TOTAL_RAM_RAW)
    echo -e "RAM        : $TOTAL_RAM"
    TOTAL_SWAP_RAW=$(free | grep Swap | awk '{ print $2 }')
    TOTAL_SWAP=$(format_size $TOTAL_SWAP_RAW)
    echo -e "Swap       : $TOTAL_SWAP"
    # total disk size is calculated by adding all partitions of the types listed below (after the -t flags)
    TOTAL_DISK_RAW=$(df -t simfs -t ext2 -t ext3 -t ext4 -t btrfs -t xfs -t vfat -t ntfs -t swap --total 2>/dev/null | grep total | awk '{ print $2 }')
    TOTAL_DISK=$(format_size $TOTAL_DISK_RAW)
    echo -e "Disk       : $TOTAL_DISK"
    DISTRO=$(grep 'PRETTY_NAME' /etc/os-release | cut -d '"' -f 2 )
    echo -e "Distro     : $DISTRO"
    KERNEL=$(uname -r)
    echo -e "Kernel     : $KERNEL"
    VIRT=$(systemd-detect-virt 2>/dev/null)
    VIRT=${VIRT^^} || VIRT="UNKNOWN"
    echo -e "VM Type    : $VIRT"
    [[ -z "$IPV4_CHECK" ]] && ONLINE="\xE2\x9D\x8C Offline / " || ONLINE="\xE2\x9C\x94 Online / "
    [[ -z "$IPV6_CHECK" ]] && ONLINE+="\xE2\x9D\x8C Offline" || ONLINE+="\xE2\x9C\x94 Online"
    echo -e "IPv4/IPv6  : $ONLINE"


    echo -e
    # override locale to eliminate parsing errors (i.e. using commas as delimiters rather than periods)
    if locale -a 2>/dev/null | grep ^C$ > /dev/null; then
      # locale "C" installed
      export LC_ALL=C
    else
      # locale "C" not installed, display warning
      echo -e "\nWarning: locale 'C' not detected. Test outputs may not be parsed correctly."
    fi

    # determine architecture of host
    ARCH=$(uname -m)
    if [[ $ARCH = *x86_64* ]]; then
      # host is running a 64-bit kernel
      ARCH="x64"
    elif [[ $ARCH = *i?86* ]]; then
      # host is running a 32-bit kernel
      ARCH="x86"
    elif [[ $ARCH = *aarch* || $ARCH = *arm* ]]; then
      KERNEL_BIT=$(getconf LONG_BIT)
      if [[ $KERNEL_BIT = *64* ]]; then
        # host is running an ARM 64-bit kernel
        ARCH="aarch64"
      else
        # host is running an ARM 32-bit kernel
        ARCH="arm"
      fi
      echo -e "\nARM compatibility is considered *experimental*"
    else
      # host is running a non-supported kernel
      echo -e "Architecture not supported."
      exit 1
    fi

    echo -e
    IPERF_CMD=iperf3
    IPERF_LOCS=( \
      "server_ip" "5201" "iperf-k8s-client" "podname" "IPv4" \
      # "ping.online.net" "5200-5209" "Scaleway" "Paris, FR (10G)" "IPv4" \
      # "ping6.online.net" "5200-5209" "Scaleway" "Paris, FR (10G)" "IPv6" \
      # "nyc.speedtest.clouvider.net" "5200-5209" "Clouvider" "NYC, NY, US (10G)" "IPv4|IPv6" \
    )


    # iperf_test
    # Purpose: This method is designed to test the network performance of the host by executing an
    #          iperf3 test to/from the public iperf server passed to the function. Both directions 
    #          (send and receive) are tested.
    # Parameters:
    #          1. URL - URL/domain name of the iperf server
    #          2. PORTS - the range of ports on which the iperf server operates
    #          3. HOST - the friendly name of the iperf server host/owner
    #          4. FLAGS - any flags that should be passed to the iperf command
    function iperf_test {
      URL=$1
      PORTS=$2
      HOST=$3
      FLAGS=$4
      
      # attempt the iperf send test 3 times, allowing for a slot to become available on the
      #   server or to throw out any bad/error results
      I=1
      while [ $I -le 3 ]
      do
        # echo -en "Performing $MODE iperf3 send test to $HOST (Attempt #$I of 3)..."
        # select a random iperf port from the range provided
        # PORT=$(shuf -i $PORTS -n 1)
        # run the iperf test sending data from the host to the iperf server; includes
        #   a timeout of 15s in case the iperf server is not responding; uses 8 parallel
        #   threads for the network test
        IPERF_RUN_SEND="$(timeout 15 $IPERF_CMD $FLAGS -c $URL -P 8 2> /dev/null)"
        # check if iperf exited cleanly and did not return an error
        if [[ "$IPERF_RUN_SEND" == *"receiver"* && "$IPERF_RUN_SEND" != *"error"* ]]; then
          # test did not result in an error, parse speed result
          SPEED=$(echo "${IPERF_RUN_SEND}" | grep SUM | grep receiver | awk '{ print $6 }')
          # if speed result is blank or bad (0.00), rerun, otherwise set counter to exit loop
          [[ -z $SPEED || "$SPEED" == "0.00" ]] && I=$(( $I + 1 )) || I=11
        else
          # if iperf server is not responding, set counter to exit, otherwise increment, sleep, and rerun
          [[ "$IPERF_RUN_SEND" == *"unable to connect"* ]] && I=11 || I=$(( $I + 1 )) && sleep 2
        fi
        echo -en "\r\033[0K"
      done

      # small sleep necessary to give iperf server a breather to get ready for a new test
      sleep 1

      # attempt the iperf receive test 3 times, allowing for a slot to become available on
      #   the server or to throw out any bad/error results
      J=1
      while [ $J -le 3 ]
      do
        # echo -n "Performing $MODE iperf3 recv test from $HOST (Attempt #$J of 3)..."
        # select a random iperf port from the range provided
        # PORT=$(shuf -i $PORTS -n 1)
        # run the iperf test receiving data from the iperf server to the host; includes
        #   a timeout of 15s in case the iperf server is not responding; uses 8 parallel
        #   threads for the network test
        IPERF_RUN_RECV="$(timeout 15 $IPERF_CMD $FLAGS -c $URL -P 8 -R 2> /dev/null)"
        # check if iperf exited cleanly and did not return an error
        if [[ "$IPERF_RUN_RECV" == *"receiver"* && "$IPERF_RUN_RECV" != *"error"* ]]; then
          # test did not result in an error, parse speed result
          SPEED=$(echo "${IPERF_RUN_RECV}" | grep SUM | grep receiver | awk '{ print $6 }')
          # if speed result is blank or bad (0.00), rerun, otherwise set counter to exit loop
          [[ -z $SPEED || "$SPEED" == "0.00" ]] && J=$(( $J + 1 )) || J=11
        else
          # if iperf server is not responding, set counter to exit, otherwise increment, sleep, and rerun
          [[ "$IPERF_RUN_RECV" == *"unable to connect"* ]] && J=11 || J=$(( $J + 1 )) && sleep 2
        fi
        echo -en "\r\033[0K"
      done
      
      # Run a latency test via ping -c1 command -> will return "xx.x ms"
      [[ ! -z $LOCAL_PING ]] && LATENCY_RUN="$(ping -c1 $URL 2>/dev/null | grep -o 'time=.*' | sed s/'time='//)" 
      [[ -z $LATENCY_RUN ]] && LATENCY_RUN="--"

      # parse the resulting send and receive speed results
      IPERF_SENDRESULT="$(echo "${IPERF_RUN_SEND}" | grep SUM | grep receiver)"
      IPERF_RECVRESULT="$(echo "${IPERF_RUN_RECV}" | grep SUM | grep receiver)"
      LATENCY_RESULT="$(echo "${LATENCY_RUN}")"
    }

    # get the total number of iperf locations (total array size divided by 5 since each location has 5 elements)
    IPERF_LOCS_NUM=${#IPERF_LOCS[@]}
    IPERF_LOCS_NUM=$((IPERF_LOCS_NUM / 5))

    # launch_iperf
    # Purpose: This method is designed to facilitate the execution of iperf network speed tests to
    #          each public iperf server in the iperf server locations array.
    # Parameters:
    #          1. MODE - indicates the type of iperf tests to run (IPv4 or IPv6)
    function launch_iperf {
      MODE=$1
      [[ "$MODE" == *"IPv6"* ]] && IPERF_FLAGS="-6" || IPERF_FLAGS="-4"

      # print iperf3 network speed results as they are completed
      echo -e
      echo -e "iperf3 Network Speed Tests ($MODE):"
      echo -e "---------------------------------"
      printf "%-15s | %-25s | %-15s | %-15s | %-15s\n" "Provider" "Location (Link)" "Send Speed" "Recv Speed" "Ping"
      printf "%-15s | %-25s | %-15s | %-15s | %-15s\n" "-----" "-----" "----" "----" "----"
      
      # loop through iperf locations array to run iperf test using each public iperf server
      for (( i = 0; i < IPERF_LOCS_NUM; i++ )); do
        # test if the current iperf location supports the network mode being tested (IPv4/IPv6)
        if [[ "${IPERF_LOCS[i*5+4]}" == *"$MODE"* ]]; then
          # call the iperf_test function passing the required parameters
          iperf_test "${IPERF_LOCS[i*5]}" "${IPERF_LOCS[i*5+1]}" "${IPERF_LOCS[i*5+2]}" "$IPERF_FLAGS"
          # parse the send and receive speed results
          IPERF_SENDRESULT_VAL=$(echo $IPERF_SENDRESULT | awk '{ print $6 }')
          IPERF_SENDRESULT_UNIT=$(echo $IPERF_SENDRESULT | awk '{ print $7 }')
          IPERF_RECVRESULT_VAL=$(echo $IPERF_RECVRESULT | awk '{ print $6 }')
          IPERF_RECVRESULT_UNIT=$(echo $IPERF_RECVRESULT | awk '{ print $7 }')
          LATENCY_VAL=$(echo $LATENCY_RESULT)
          # if the results are blank, then the server is "busy" and being overutilized
          [[ -z $IPERF_SENDRESULT_VAL || "$IPERF_SENDRESULT_VAL" == *"0.00"* ]] && IPERF_SENDRESULT_VAL="busy" && IPERF_SENDRESULT_UNIT=""
          [[ -z $IPERF_RECVRESULT_VAL || "$IPERF_RECVRESULT_VAL" == *"0.00"* ]] && IPERF_RECVRESULT_VAL="busy" && IPERF_RECVRESULT_UNIT=""
          # print the speed results for the iperf location currently being evaluated
          printf "%-15s | %-25s | %-15s | %-15s | %-15s\n" "${IPERF_LOCS[i*5+2]}" "${IPERF_LOCS[i*5+3]}(${IPERF_LOCS[i*5]})" "$IPERF_SENDRESULT_VAL $IPERF_SENDRESULT_UNIT" "$IPERF_RECVRESULT_VAL $IPERF_RECVRESULT_UNIT" "$LATENCY_VAL"
          if [ ! -z $JSON ]; then
            JSON_RESULT+='{"mode":"'$MODE'","provider":"'${IPERF_LOCS[i*5+2]}'","loc":"'${IPERF_LOCS[i*5+3]}
            JSON_RESULT+='","send":"'$IPERF_SENDRESULT_VAL' '$IPERF_SENDRESULT_UNIT'","recv":"'$IPERF_RECVRESULT_VAL' '$IPERF_RECVRESULT_UNIT'","latency":"'$LATENCY_VAL'"},'
          fi
        fi
      done
    }

    launch_iperf "IPv4"
