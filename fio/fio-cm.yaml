apiVersion: v1
kind: ConfigMap
metadata:
  name: fio-cm
data:
  fio-script.sh: |
    #!/bin/bash
    # format_size
    # Purpose: Formats raw disk and memory sizes from kibibytes (KiB) to largest unit
    # Parameters:
    #          1. RAW - the raw memory size (RAM/Swap) in kibibytes
    # Returns:
    #          Formatted memory size in KiB, MiB, GiB, or TiB
    function format_size {
      RAW=$1 # mem size in KiB
      RESULT=$RAW
      local DENOM=1
      local UNIT="KiB"

      # ensure the raw value is a number, otherwise return blank
      re='^[0-9]+$'
      if ! [[ $RAW =~ $re ]] ; then
        echo "" 
        return 0
      fi

      if [ "$RAW" -ge 1073741824 ]; then
        DENOM=1073741824
        UNIT="TiB"
      elif [ "$RAW" -ge 1048576 ]; then
        DENOM=1048576
        UNIT="GiB"
      elif [ "$RAW" -ge 1024 ]; then
        DENOM=1024
        UNIT="MiB"
      fi

      # divide the raw result to get the corresponding formatted result (based on determined unit)
      RESULT=$(awk -v a="$RESULT" -v b="$DENOM" 'BEGIN { print a / b }')
      # shorten the formatted result to two decimal places (i.e. x.x)
      RESULT=$(echo $RESULT | awk -F. '{ printf "%0.1f",$1"."substr($2,1,2) }')
      # concat formatted result value with units and return result
      RESULT="$RESULT $UNIT"
      echo $RESULT
    }
    FIO_CMD=fio
    DATE=$(date -Iseconds | sed -e "s/:/_/g")
    TEST_PATH=./$DATE
    DISK_PATH=$TEST_PATH/disk
    mkdir -p $DISK_PATH
    echo -e '# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #'
    echo -e '#              FIO DISK TEST                         #'
    echo -e '#                                                    #'
    echo -e '#                                                    #'
    echo -e '# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## #'

    echo -e
    date
    TIME_START=$(date '+%Y%m%d-%H%M%S')

    IPV4_CHECK=$((ping -4 -c 1 -W 4 ipv4.google.com >/dev/null 2>&1 && echo true) || $IP_CHECK_CMD -4 icanhazip.com 2> /dev/null)
    IPV6_CHECK=$((ping -6 -c 1 -W 4 ipv6.google.com >/dev/null 2>&1 && echo true) || $IP_CHECK_CMD -6 icanhazip.com 2> /dev/null)
    echo -e 
    echo -e "Basic System Information:"
    echo -e "---------------------------------"
    UPTIME=$(uptime | awk -F'( |,|:)+' '{d=h=m=0; if ($7=="min") m=$6; else {if ($7~/^day/) {d=$6;h=$8;m=$9} else {h=$6;m=$7}}} {print d+0,"days,",h+0,"hours,",m+0,"minutes"}')
    echo -e "Uptime     : $UPTIME"
    if [[ $ARCH = *aarch64* || $ARCH = *arm* ]]; then
      CPU_PROC=$(lscpu | grep "Model name" | sed 's/Model name: *//g')
    else
      CPU_PROC=$(awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//')
    fi
    echo -e "Processor  : $CPU_PROC"
    if [[ $ARCH = *aarch64* || $ARCH = *arm* ]]; then
      CPU_CORES=$(lscpu | grep "^[[:blank:]]*CPU(s):" | sed 's/CPU(s): *//g')
      CPU_FREQ=$(lscpu | grep "CPU max MHz" | sed 's/CPU max MHz: *//g')
      [[ -z "$CPU_FREQ" ]] && CPU_FREQ="???"
      CPU_FREQ="${CPU_FREQ} MHz"
    else
      CPU_CORES=$(awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo)
      CPU_FREQ=$(awk -F: ' /cpu MHz/ {freq=$2} END {print freq " MHz"}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//')
    fi
    echo -e "CPU cores  : $CPU_CORES @ $CPU_FREQ"
    CPU_AES=$(cat /proc/cpuinfo | grep aes)
    [[ -z "$CPU_AES" ]] && CPU_AES="\xE2\x9D\x8C Disabled" || CPU_AES="\xE2\x9C\x94 Enabled"
    echo -e "AES-NI     : $CPU_AES"
    CPU_VIRT=$(cat /proc/cpuinfo | grep 'vmx\|svm')
    [[ -z "$CPU_VIRT" ]] && CPU_VIRT="\xE2\x9D\x8C Disabled" || CPU_VIRT="\xE2\x9C\x94 Enabled"
    echo -e "VM-x/AMD-V : $CPU_VIRT"
    TOTAL_RAM_RAW=$(free | awk 'NR==2 {print $2}')
    TOTAL_RAM=$(format_size $TOTAL_RAM_RAW)
    echo -e "RAM        : $TOTAL_RAM"
    TOTAL_SWAP_RAW=$(free | grep Swap | awk '{ print $2 }')
    TOTAL_SWAP=$(format_size $TOTAL_SWAP_RAW)
    echo -e "Swap       : $TOTAL_SWAP"
    # total disk size is calculated by adding all partitions of the types listed below (after the -t flags)
    TOTAL_DISK_RAW=$(df -t simfs -t ext2 -t ext3 -t ext4 -t btrfs -t xfs -t vfat -t ntfs -t swap --total 2>/dev/null | grep total | awk '{ print $2 }')
    TOTAL_DISK=$(format_size $TOTAL_DISK_RAW)
    echo -e "Disk       : $TOTAL_DISK"
    DISTRO=$(grep 'PRETTY_NAME' /etc/os-release | cut -d '"' -f 2 )
    echo -e "Distro     : $DISTRO"
    KERNEL=$(uname -r)
    echo -e "Kernel     : $KERNEL"
    VIRT=$(systemd-detect-virt 2>/dev/null)
    VIRT=${VIRT^^} || VIRT="UNKNOWN"
    echo -e "VM Type    : $VIRT"
    [[ -z "$IPV4_CHECK" ]] && ONLINE="\xE2\x9D\x8C Offline / " || ONLINE="\xE2\x9C\x94 Online / "
    [[ -z "$IPV6_CHECK" ]] && ONLINE+="\xE2\x9D\x8C Offline" || ONLINE+="\xE2\x9C\x94 Online"
    echo -e "IPv4/IPv6  : $ONLINE"



    # override locale to eliminate parsing errors (i.e. using commas as delimiters rather than periods)
    if locale -a 2>/dev/null | grep ^C$ > /dev/null; then
      # locale "C" installed
      export LC_ALL=C
    else
      # locale "C" not installed, display warning
      echo -e "\nWarning: locale 'C' not detected. Test outputs may not be parsed correctly."
    fi

    # determine architecture of host
    ARCH=$(uname -m)
    if [[ $ARCH = *x86_64* ]]; then
      # host is running a 64-bit kernel
      ARCH="x64"
    elif [[ $ARCH = *i?86* ]]; then
      # host is running a 32-bit kernel
      ARCH="x86"
    elif [[ $ARCH = *aarch* || $ARCH = *arm* ]]; then
      KERNEL_BIT=$(getconf LONG_BIT)
      if [[ $KERNEL_BIT = *64* ]]; then
        # host is running an ARM 64-bit kernel
        ARCH="aarch64"
      else
        # host is running an ARM 32-bit kernel
        ARCH="arm"
      fi
      echo -e "\nARM compatibility is considered *experimental*"
    else
      # host is running a non-supported kernel
      echo -e "Architecture not supported."
      exit 1
    fi

    # format_speed
    # Purpose: This method is a convenience function to format the output of the fio disk tests which
    #          always returns a result in KB/s. If result is >= 1 GB/s, use GB/s. If result is < 1 GB/s
    #          and >= 1 MB/s, then use MB/s. Otherwise, use KB/s.
    # Parameters:
    #          1. RAW - the raw disk speed result (in KB/s)
    # Returns:
    #          Formatted disk speed in GB/s, MB/s, or KB/s
    function format_speed {
      RAW=$1 # disk speed in KB/s
      RESULT=$RAW
      local DENOM=1
      local UNIT="KB/s"

      # ensure raw value is not null, if it is, return blank
      if [ -z "$RAW" ]; then
        echo ""
        return 0
      fi

      # check if disk speed >= 1 GB/s
      if [ "$RAW" -ge 1000000 ]; then
        DENOM=1000000
        UNIT="GB/s"
      # check if disk speed < 1 GB/s && >= 1 MB/s
      elif [ "$RAW" -ge 1000 ]; then
        DENOM=1000
        UNIT="MB/s"
      fi

      # divide the raw result to get the corresponding formatted result (based on determined unit)
      RESULT=$(awk -v a="$RESULT" -v b="$DENOM" 'BEGIN { print a / b }')
      # shorten the formatted result to two decimal places (i.e. x.xx)
      RESULT=$(echo $RESULT | awk -F. '{ printf "%0.2f",$1"."substr($2,1,2) }')
      # concat formatted result value with units and return result
      RESULT="$RESULT $UNIT"
      echo $RESULT
    }

    # format_iops
    # Purpose: This method is a convenience function to format the output of the raw IOPS result
    # Parameters:
    #          1. RAW - the raw IOPS result
    # Returns:
    #          Formatted IOPS (i.e. 8, 123, 1.7k, 275.9k, etc.)
    function format_iops {
      RAW=$1 # iops
      RESULT=$RAW

      # ensure raw value is not null, if it is, return blank
      if [ -z "$RAW" ]; then
        echo ""
        return 0
      fi

      # check if IOPS speed > 1k
      if [ "$RAW" -ge 1000 ]; then
        # divide the raw result by 1k
        RESULT=$(awk -v a="$RESULT" 'BEGIN { print a / 1000 }')
        # shorten the formatted result to one decimal place (i.e. x.x)
        RESULT=$(echo $RESULT | awk -F. '{ printf "%0.1f",$1"."substr($2,1,1) }')
        RESULT="$RESULT"k
      fi

      echo $RESULT
    }
    function disk_test {
      if [[ "$ARCH" = "aarch64" || "$ARCH" = "arm" ]]; then
        FIO_SIZE=512M
      else
        FIO_SIZE=2G
      fi

      # run a quick test to generate the fio test file to be used by the actual tests
      echo -en "Generating fio test file..."
      $FIO_CMD --name=setup --ioengine=libaio --rw=read --bs=64k --iodepth=64 --numjobs=2 --size=$FIO_SIZE --runtime=1 --gtod_reduce=1 --filename=$DISK_PATH/test.fio --direct=1 --minimal &> /dev/null
      echo -en "\r\033[0K"

      # get array of block sizes to evaluate
      BLOCK_SIZES=("$@")

      for BS in "${BLOCK_SIZES[@]}"; do
        # run rand read/write mixed fio test with block size = $BS
        echo -en "Running fio random mixed R+W disk test with $BS block size..."
        DISK_TEST=$(timeout 35 $FIO_CMD --name=rand_rw_$BS --ioengine=libaio --rw=randrw --rwmixread=50 --bs=$BS --iodepth=64 --numjobs=2 --size=$FIO_SIZE --runtime=30 --gtod_reduce=1 --direct=1 --filename=$DISK_PATH/test.fio --group_reporting --minimal 2> /dev/null | grep rand_rw_$BS)
        DISK_IOPS_R=$(echo $DISK_TEST | awk -F';' '{print $8}')
        DISK_IOPS_W=$(echo $DISK_TEST | awk -F';' '{print $49}')
        DISK_IOPS=$(awk -v a="$DISK_IOPS_R" -v b="$DISK_IOPS_W" 'BEGIN { print a + b }')
        DISK_TEST_R=$(echo $DISK_TEST | awk -F';' '{print $7}')
        DISK_TEST_W=$(echo $DISK_TEST | awk -F';' '{print $48}')
        DISK_TEST=$(awk -v a="$DISK_TEST_R" -v b="$DISK_TEST_W" 'BEGIN { print a + b }')
        DISK_RESULTS_RAW+=( "$DISK_TEST" "$DISK_TEST_R" "$DISK_TEST_W" "$DISK_IOPS" "$DISK_IOPS_R" "$DISK_IOPS_W" )

        DISK_IOPS=$(format_iops $DISK_IOPS)
        DISK_IOPS_R=$(format_iops $DISK_IOPS_R)
        DISK_IOPS_W=$(format_iops $DISK_IOPS_W)
        DISK_TEST=$(format_speed $DISK_TEST)
        DISK_TEST_R=$(format_speed $DISK_TEST_R)
        DISK_TEST_W=$(format_speed $DISK_TEST_W)

        DISK_RESULTS+=( "$DISK_TEST" "$DISK_TEST_R" "$DISK_TEST_W" "$DISK_IOPS" "$DISK_IOPS_R" "$DISK_IOPS_W" )
        echo -en "\r\033[0K"
      done
    }

    echo -e
    declare -a DISK_RESULTS DISK_RESULTS_RAW

    BLOCK_SIZES=( "4k" "64k" "512k" "1m" )

    disk_test "${BLOCK_SIZES[@]}"


    [[ ! -z $JSON ]] && JSON_RESULT+=',"fio":['
    DISK_RESULTS_NUM=$(expr ${#DISK_RESULTS[@]} / 6)
    DISK_COUNT=0

    # print disk speed test results
    echo -e "fio Disk Speed Tests (Mixed R/W 50/50):"
    echo -e "---------------------------------"

    while [ $DISK_COUNT -lt $DISK_RESULTS_NUM ] ; do
      if [ $DISK_COUNT -gt 0 ]; then printf "%-10s | %-20s | %-20s\n"; fi
      printf "%-10s | %-11s %8s | %-11s %8s\n" "Block Size" "${BLOCK_SIZES[DISK_COUNT]}" "(IOPS)" "${BLOCK_SIZES[DISK_COUNT+1]}" "(IOPS)"
      printf "%-10s | %-11s %8s | %-11s %8s\n" "  ------" "---" "---- " "----" "---- "
      printf "%-10s | %-11s %8s | %-11s %8s\n" "Read" "${DISK_RESULTS[DISK_COUNT*6+1]}" "(${DISK_RESULTS[DISK_COUNT*6+4]})" "${DISK_RESULTS[(DISK_COUNT+1)*6+1]}" "(${DISK_RESULTS[(DISK_COUNT+1)*6+4]})"
      printf "%-10s | %-11s %8s | %-11s %8s\n" "Write" "${DISK_RESULTS[DISK_COUNT*6+2]}" "(${DISK_RESULTS[DISK_COUNT*6+5]})" "${DISK_RESULTS[(DISK_COUNT+1)*6+2]}" "(${DISK_RESULTS[(DISK_COUNT+1)*6+5]})"
      printf "%-10s | %-11s %8s | %-11s %8s\n" "Total" "${DISK_RESULTS[DISK_COUNT*6]}" "(${DISK_RESULTS[DISK_COUNT*6+3]})" "${DISK_RESULTS[(DISK_COUNT+1)*6]}" "(${DISK_RESULTS[(DISK_COUNT+1)*6+3]})"
      if [ ! -z $JSON ]; then
        JSON_RESULT+='{"bs":"'${BLOCK_SIZES[DISK_COUNT]}'","speed_r":'${DISK_RESULTS_RAW[DISK_COUNT*6+1]}',"iops_r":'${DISK_RESULTS_RAW[DISK_COUNT*6+4]}
        JSON_RESULT+=',"speed_w":'${DISK_RESULTS_RAW[DISK_COUNT*6+2]}',"iops_w":'${DISK_RESULTS_RAW[DISK_COUNT*6+5]}',"speed_rw":'${DISK_RESULTS_RAW[DISK_COUNT*6]}
        JSON_RESULT+=',"iops_rw":'${DISK_RESULTS_RAW[DISK_COUNT*6+3]}',"speed_units":"KBps"},'
        JSON_RESULT+='{"bs":"'${BLOCK_SIZES[DISK_COUNT+1]}'","speed_r":'${DISK_RESULTS_RAW[(DISK_COUNT+1)*6+1]}',"iops_r":'${DISK_RESULTS_RAW[(DISK_COUNT+1)*6+4]}
        JSON_RESULT+=',"speed_w":'${DISK_RESULTS_RAW[(DISK_COUNT+1)*6+2]}',"iops_w":'${DISK_RESULTS_RAW[(DISK_COUNT+1)*6+5]}',"speed_rw":'${DISK_RESULTS_RAW[(DISK_COUNT+1)*6]}
        JSON_RESULT+=',"iops_rw":'${DISK_RESULTS_RAW[(DISK_COUNT+1)*6+3]}',"speed_units":"KBps"},'
      fi
      DISK_COUNT=$(expr $DISK_COUNT + 2)
    done
    # [[ ! -z $JSON ]] && JSON_RESULT=${JSON_RESULT::${#JSON_RESULT}-1} && JSON_RESULT+=']'